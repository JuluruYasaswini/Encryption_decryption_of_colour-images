% Load the image and the CIELAB color space image
load('yashproject','cimage2');
url = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTjtAou1yvlHLKKtRQjnKzH9H3YUH1Bm0wrvSXwY0JmrA&s';

% Specify the local file path where you want to save the image
localFilePath = 'path_to_save_image.jpg';

% Download the image from the URL to your local machine
websave(localFilePath, url);
% Read the downloaded image using imread
im = imread(localFilePath);
%im1 = imresize(im,[700 700]);
rmatrix = im;

% Extract RGB channels
r = rmatrix(:,:,1);
g = rmatrix(:,:,2);
b = rmatrix(:,:,3);

% Extract CIELAB channels
cr = cimage2(:,:,1);
cg = cimage2(:,:,2);
cb = cimage2(:,:,3);

% Define the entropy function
function result = calculate_entropy(input_image)
    % Calculate the probability distribution of pixel values
    [counts, ~] = histc(input_image(:), 0:255);
    probabilities = counts / numel(input_image);

    % Calculate the entropy
    result = -sum(probabilities .* log2(probabilities));
end

% Calculate and display the entropy of each channel
%disp('Entropy of RGB channels:');
%disp(['R: ', num2str(calculate_entropy(r))]);
%disp(['G: ', num2str(calculate_entropy(g))]);
%disp(['B: ', num2str(calculate_entropy(b))]);
entropy_cr = calculate_entropy(cr);
entropy_cg = calculate_entropy(cg);
entropy_cb = calculate_entropy(cb);

disp('Entropy of CIELAB channels:');
disp(['Cr: ', num2str(calculate_entropy(cr))]);
disp(['Cg: ', num2str(calculate_entropy(cg))]);
disp(['Cb: ', num2str(calculate_entropy(cb))]);

subplot(1, 3, 1);
bar([entropy_cr entropy_cg entropy_cb]);
title('Entropy of CIELAB Channels');
xticklabels({'Cr', 'Cg', 'Cb'});
ylabel('Entropy');
